# -*- generated by 1.0.12 -*-
import da
PatternExpr_494 = da.pat.TuplePattern([da.pat.ConstantPattern('CAPTURE'), da.pat.FreePattern('ph'), da.pat.FreePattern('l'), da.pat.FreePattern('node')])
PatternExpr_505 = da.pat.FreePattern('sender')
PatternExpr_671 = da.pat.TuplePattern([da.pat.ConstantPattern('ACCEPT'), da.pat.FreePattern('ph'), da.pat.FreePattern('l')])
PatternExpr_680 = da.pat.FreePattern('sender')
PatternExpr_752 = da.pat.TuplePattern([da.pat.ConstantPattern('ACK'), da.pat.FreePattern('node')])
PatternExpr_759 = da.pat.FreePattern('sender')
PatternExpr_794 = da.pat.TuplePattern([da.pat.ConstantPattern('ELECTED'), da.pat.FreePattern('node')])
PatternExpr_801 = da.pat.FreePattern('sender')
PatternExpr_829 = da.pat.TuplePattern([da.pat.ConstantPattern('INFORM'), da.pat.FreePattern('x')])
PatternExpr_836 = da.pat.FreePattern('sender')
PatternExpr_875 = da.pat.TuplePattern([da.pat.ConstantPattern('OWNER'), da.pat.FreePattern('node')])
PatternExpr_882 = da.pat.FreePattern('sender')
_config_object = {}
import sys
import math

class P(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_0', PatternExpr_494, sources=[PatternExpr_505], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_493]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_1', PatternExpr_671, sources=[PatternExpr_680], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_670]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_2', PatternExpr_752, sources=[PatternExpr_759], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_751]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_3', PatternExpr_794, sources=[PatternExpr_801], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_793]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_4', PatternExpr_829, sources=[PatternExpr_836], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_828]), da.pat.EventPattern(da.pat.ReceivedEvent, '_PReceivedEvent_5', PatternExpr_875, sources=[PatternExpr_882], destinations=None, timestamps=None, record_history=None, handlers=[self._P_handler_874])])

    def setup(self, hCycle, **rest_1022):
        super().setup(hCycle=hCycle, **rest_1022)
        self._state.hCycle = hCycle
        self._state.n = len(self._state.hCycle)
        self._state.k = (self._state.n / (2 ** math.ceil(math.log(math.log(self._state.n, 2), 2))))
        self._state.state = 'candidate'
        self._state.level = 0
        self._state.phase = 1
        self._state.owner = 0
        self._state.ring = [self._state.hCycle[int(((i * self._state.k) % self._state.n))] for i in range(int((self._state.n / self._state.k)))]
        self._state.step = 0
        self._state.elected = False
        self._state.Received = False
        self._state.Response = 0
        self._state.done = False
        self._state.first_msg = True
        self._state.leaderid = None
        self._state.receiving_flag = False

    def run(self):
        if (self._state.state == 'candidate'):
            self.candidateAct()
        if ((self._state.state == 'captured') and (self._state.leaderid == None)):
            self.capturedAct()
        self.output('Leader is', self._state.leaderid)

    def candidateAct(self):
        while ((self._state.state == 'candidate') and (self._state.phase == 1)):
            if (self._state.level >= (self._state.n / self._state.k)):
                self.send(('OWNER', self._id), to=self._state.ring)
                self._state.Response = 0
            else:
                send_to = int((((self._state.level + 1) * self._state.k) % self._state.n))
                self.send(('CAPTURE', 1, self._state.level, self._id), to=self._state.hCycle[send_to])
            self._state.Received = False
            while ((self._state.state == 'candidate') and (self._state.phase == 1) and (self._state.Received == False)):
                super()._label('_st_label_358', block=False)
                _st_label_358 = 0
                while (_st_label_358 == 0):
                    _st_label_358 += 1
                    if self._state.receiving_flag:
                        _st_label_358 += 1
                    else:
                        super()._label('_st_label_358', block=True)
                        _st_label_358 -= 1
                else:
                    if (_st_label_358 != 2):
                        continue
                if (_st_label_358 != 2):
                    break
                self._state.receiving_flag = False
        if ((self._state.state == 'candidate') and (self._state.phase == 2)):
            self._state.step = 1
            self._state.elected = False
            while ((self._state.state == 'candidate') and (self._state.elected == False)):
                self.send(('CAPTURE', 2, self._state.step, self._id), to=[self._state.hCycle[int((((i * self._state.k) / (2 ** self._state.step)) % self._state.n))] for i in range(1, int(((2 ** (self._state.step - 1)) + 1)))])
                self._state.Received = False
                self._state.Response = 0
                while ((self._state.state == 'candidate') and (self._state.elected == False) and (self._state.Received == False)):
                    super()._label('_st_label_439', block=False)
                    _st_label_439 = 0
                    while (_st_label_439 == 0):
                        _st_label_439 += 1
                        if self._state.receiving_flag:
                            _st_label_439 += 1
                        else:
                            super()._label('_st_label_439', block=True)
                            _st_label_439 -= 1
                    else:
                        if (_st_label_439 != 2):
                            continue
                    if (_st_label_439 != 2):
                        break
                    self._state.receiving_flag = False
            if (self._state.state == 'candidate'):
                self.send(('ELECTED', self._id), to=self._state.hCycle)
                self._state.leaderid = self._id

    def capturedAct(self):
        self._state.done = False
        self._state.first_msg = True
        while (self._state.done == False):
            if (self._state.first_msg == True):
                self._state.state = 'captured'
                self._state.owner = 0
                self._state.phase = 1
            super()._label('_st_label_483', block=False)
            _st_label_483 = 0
            while (_st_label_483 == 0):
                _st_label_483 += 1
                if self._state.receiving_flag:
                    _st_label_483 += 1
                else:
                    super()._label('_st_label_483', block=True)
                    _st_label_483 -= 1
            else:
                if (_st_label_483 != 2):
                    continue
            if (_st_label_483 != 2):
                break
            self._state.receiving_flag = False
            self._state.first_msg = False

    def _P_handler_493(self, ph, l, node, sender):
        self._state.receiving_flag = True
        if (self._state.state == 'candidate'):
            if (self._state.phase == 1):
                if (ph == 1):
                    if ((self._state.level < l) or ((self._state.level == l) and (self._id < node))):
                        self.send(('ACCEPT', 1, self._state.level), to=sender)
                        self._state.state = 'captured'
                    elif ((self._state.level == l) and (self._id == node)):
                        self.send(('ACCEPT', 1, self._state.level), to=sender)
                elif (ph == 2):
                    self._state.state = 'captured'
                    self._state.phase = 2
                    self.send(('ACCEPT', 2, 0), to=sender)
            elif (self._state.phase == 2):
                if (ph == 2):
                    if ((l > self._state.step) or ((l == self._state.step) and (node > self._id))):
                        self.send(('ACCEPT', 2, 0), to=sender)
                        self._state.state = 'captured'
                    elif ((l == self._state.step) and (self._id == node)):
                        self.send(('ACCEPT', 2, 0), to=sender)
        elif (self._state.state == 'captured'):
            if (ph == 1):
                if (self._state.phase == 1):
                    self.send(('ACCEPT', 1, 0), to=sender)
            elif (ph == 2):
                if ((self._state.phase == 1) or (self._state.owner == 0)):
                    self.send(('ACCEPT', 2, 0), to=sender)
                    self._state.phase = 2
                else:
                    self.send(('INFORM', self._state.owner), to=sender)
    _P_handler_493._labels = None
    _P_handler_493._notlabels = None

    def _P_handler_670(self, ph, l, sender):
        self._state.receiving_flag = True
        if (self._state.state == 'candidate'):
            if ((self._state.phase == 1) and (ph == 1)):
                self._state.level = ((self._state.level + l) + 1)
                self._state.Received = True
            elif ((self._state.phase == 2) and (ph == 2)):
                self._state.Response = (self._state.Response + 1)
                if (self._state.Response == (2 ** (self._state.step - 1))):
                    self._state.step = (self._state.step + 1)
                    if (self._state.step == (math.log(self._state.k, 2) + 1)):
                        self._state.elected = True
                    else:
                        self._state.Received = True
    _P_handler_670._labels = None
    _P_handler_670._notlabels = None

    def _P_handler_751(self, node, sender):
        self._state.receiving_flag = True
        if ((self._state.state == 'candidate') and (self._state.phase == 1) and (node == self._id)):
            self._state.Response = (self._state.Response + 1)
            if (self._state.Response == ((self._state.n / self._state.k) - 1)):
                self._state.phase = 2
    _P_handler_751._labels = None
    _P_handler_751._notlabels = None

    def _P_handler_793(self, node, sender):
        self._state.receiving_flag = True
        if (self._state.state == 'candidate'):
            self._state.state = 'captured'
            self._state.leaderid = node
        elif (self._state.state == 'captured'):
            self._state.done = True
            self._state.leaderid = node
    _P_handler_793._labels = None
    _P_handler_793._notlabels = None

    def _P_handler_828(self, x, sender):
        self._state.receiving_flag = True
        if ((self._state.state == 'candidate') and (self._state.phase == 2)):
            e = self._state.hCycle.index(sender)
            self.send(('CAPTURE', 2, self._state.step, self._id), to=self._state.hCycle[int(((e + x) % self._state.n))])
    _P_handler_828._labels = None
    _P_handler_828._notlabels = None

    def _P_handler_874(self, node, sender):
        self._state.receiving_flag = True
        if ((self._state.state == 'captured') and (self._state.phase == 1)):
            self._state.owner = self._state.hCycle.index(node)
            self._state.phase = 2
            self.send(('ACK', node), to=sender)
        elif ((self._state.state == 'candidate') and (self._state.phase == 1) and (self._id == node)):
            self._state.owner = self._state.hCycle.index(node)
            self.send(('ACK', node), to=sender)
    _P_handler_874._labels = None
    _P_handler_874._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'fifo'}

    def run(self):
        n = (int(sys.argv[1]) if (len(sys.argv) > 1) else 16)
        ps = list(self.new(P, num=n))
        self.output(ps)
        for (i, p) in enumerate(ps):
            self._setup({p}, ([ps[int(((i + j) % n))] for j in range(n)],))
        self._start(ps)
